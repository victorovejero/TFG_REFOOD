
entity Nucleo {
    // @Id idNucleo Integer required,
    nombreNucleo String required,
    direccionNucleo String required,
    provinciaNucleo String required,
    responsableNucleo String required,
    telefonoNucleo String required,
    emailNucleo String required,
    numeroRutas Integer required
}
entity Donante {
    // @Id idDonante Integer required,
    nombreDonante String required,
    //idNucleo Integer required, //1 to many with NUCLEOS
    tipoDonante String required,
    ruta Integer required,
    direccionDonante String required,
    telefonoDonante String required,
    emailDonante String required,
    responsableDonante String required,
    fechaAlta LocalDate required,
    fechaBaja LocalDate,
    comentarios String
}
entity Beneficiario {
// @Id idBeneficiario Integer required,
nombreBeneficiario String required,
    numPersonas Integer required,
    //idNucleo Integer required, //1 to many rel. with NUCLEOS
    numNinios Integer required,
    idDual String, // ACLARAR QUE TIPO Y QUE ES
// intolerancias String
}

entity AlimentoDeEntrada {
	// @Id idRegistroEntrada Integer required,
    // tipoAlimento String required, ESTO LO QUITAMOS POR QUE ES MEJOR HACER UNA RELACION ON TO MANY
    // descripcionAlimento String required, LO MISMO AQUI
    //idDonante Integer required, //1 to many rel. with DONANTE
    peso Double required,
    fechaEntrada LocalDate required,
    fechaYHoraLog ZonedDateTime required,
    fechaYHoraRecogida ZonedDateTime,
    fechaYHoraPreparacion ZonedDateTime

}

entity AlimentoDeSalida {
// @Id idRegistroSalida Integer required,
// tipoAlimento String required, // ESTO LO QUITAMOS POR QUE ES MEJOR HACER UNA RELACION ONE TO MANY
// decripcionAlimento String required, // LO MISMO AQUI
peso Double required,
    fechaEntrada LocalDate required,
    fechaSalida LocalDate required,
    fechaYHoraLog ZonedDateTime required,
    fechaYHoraPreparacion ZonedDateTime,
    fechaYHoraRecogida ZonedDateTime, }

entity TipoDeAlimento{
	nombreAlimento String required,
    //intolerancias String
}

entity Tupper{
    peso Double required,
    productor String required,
    modelo String required,
    precio Double required,
    descripcion String
}
entity Intolerancia {
    nombreIntolerancia String
}
entity Voluntario {
    nombreVoluntario String required,
    primerApellido String required,
    segundoApellido String,
    emailVoluntario String required,
    telefonoContactoVoluntario String required,
    dniVoluntario String,
    fechaNacimientoVoluntario LocalDate required,
    //idNucleo Integer required,
    sexoVoluntario String required,
    fechaAlta LocalDate required,
    fechaBaja LocalDate,
    tipoVoluntario String required,
    tipoTurno String,
    responsableDia Boolean,
    origenVoluntario String,
    manipuladorAlimentos Boolean required,
    codigoPostal String required
}
entity Socio{
    nombreSocio String required,
    primerApellidoSocio String required,
    segundoApellidoSocio String,
    emailSocio String required,
    telefonoContactoSocio String required,
    dniSocio String required,
    fechaNacimientoSocio LocalDate required,
    sexoSocio String required,
    fechaAltaSocio LocalDate required,
    fechaBajaSocio LocalDate,
    contribucionMensual Double required,
    periodoPago String required
}
entity Registro {
    diaActividad LocalDate required,
    //voluntario String required (1 to many)
    //nucleo String required ?? (1 to many)
    ruta String required, // responsableTrazabilidad
    }



relationship OneToOne {
	AlimentoDeEntrada {alimentoDeEntrada
}
to TipoDeAlimento
}

relationship OneToMany {
    Nucleo to Donante{nucleo}
    Nucleo to Beneficiario{nucleo}
    Nucleo to Voluntario{nucleo}
    Nucleo to Socio{nucleo}
    Nucleo to Registro{nucleo}
    Tupper to AlimentoDeSalida{tupper}
    Tupper to AlimentoDeSalida{tupper}
    Beneficiario to AlimentoDeSalida{beneficiario}
    Donante to AlimentoDeEntrada{donante}
    AlimentoDeEntrada to AlimentoDeSalida{alimentoDeEntrada}
    TipoDeAlimento to AlimentoDeEntrada{tipoDeAlimento}
    TipoDeAlimento to AlimentoDeSalida{tipoDeAlimento}
}
relationship ManyToMany {
    Intolerancia{tipoDeAlimento} to TipoDeAlimento{intolerancia}
	Intolerancia{beneficiario} to Beneficiario{intolerancia}
	Registro{voluntario} to Voluntario{registro}
}
paginate Intolerancia, Nucleo, Tupper, Socio, TipoDeAlimento with infinite-scroll
paginate  Donante, Beneficiario, AlimentoDeEntrada, AlimentoDeSalida, Registro, Voluntario with pagination
service all with serviceImpl
// Use Data Transfer Objects (DTO)
dto * with mapstruct
// Set service options to all except few
// Set an angular suffix
// angularSuffix * with mySuffix
